from filplus_autocap.blockchain_utils.transaction import Tx
from filplus_autocap.utils.setup import initialize
from filplus_autocap.utils.constants import GAS_PRICE

from filplus_autocap.blockchain_utils.wallet import Wallet
from filplus_autocap.blockchain_utils.storage_provider import initialize_sp


# --- Setup ---
env = initialize()

wallets = env.wallets
processor = env.processor
revenue_bot = env.revenue_bot
master_bot = env.master_bot
verified_list = env.verified_list

# Create and register a new SP
sp_1 = initialize_sp(
    address="f1sp001",
    owner="sp001",
    fil_balance=150.0,
    wallets=wallets,
    processor=processor
)
# --- Step 1: Registration ---
registration_tx = Tx(
    sender=sp_1.address,
    recipient=verified_list.address,
    fil_amount=0.0,
    datacap_amount=0.0,
    signers=[sp_1.address],
    message="Registering"
)
print("Registration:", registration_tx)
processor.send([registration_tx])

# --- Step 2: SP sends revenue to RevenueBot ---
incoming = Tx(
    sender=sp_1.address,
    recipient=revenue_bot.address,
    fil_amount=100.0,
    signers=[sp_1.address]
)
print("\nIncoming FIL:", incoming)
processor.send([incoming])
resulting_txs = revenue_bot.process_incoming_tx(incoming)

for tx in resulting_txs:
    print("Generated by RevenueBot:", tx)
    processor.send([tx])

# --- Step 3: Auction End â€” MasterBot drains auction and executes logic ---
reward_txs = master_bot.execute_auction_round()
for tx in reward_txs:
    print(" ")
    print("MasterBot Tx:", tx)
    processor.send([tx])

# --- Final State ---
print("\n--- Final Wallet Balances ---")
for addr, wallet in wallets.items():
    print(wallet)

print("\n--- Auction State (should be empty) ---")
print(revenue_bot.current_auction)
